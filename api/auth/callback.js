// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OAuth2 –æ—Ç –æ—Ä–±–∏—Ç–∞—Ä–∞
export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'GET') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        console.log('üîç [DEBUG] Callback invoked');
        console.log('üîç [DEBUG] Request method:', req.method);
        console.log('üîç [DEBUG] Request URL:', req.url);
        console.log('üîç [DEBUG] Query params:', JSON.stringify(req.query, null, 2));
        console.log('üîç [DEBUG] Headers:', JSON.stringify(req.headers, null, 2));
        
        const { code, state, error } = req.query;
        
        console.log('üîç [DEBUG] Extracted params:');
        console.log('  - code:', code);
        console.log('  - state:', state); 
        console.log('  - error:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (error) {
            console.error('‚ùå OAuth2 error:', error);
            return res.redirect('/?error=access_denied');
        }

        if (!code || !state) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç code –∏–ª–∏ state –≤ callback');
            console.error('‚ùå All query params:', Object.keys(req.query));
            return res.redirect('/?error=invalid_request');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π state –∏–∑ cookie
        const requestCookies = req.headers.cookie?.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = value;
            return acc;
        }, {}) || {};

        const savedState = requestCookies.oauth_state;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º state –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF
        if (!savedState || savedState !== state) {
            console.error('‚ùå State mismatch - –≤–æ–∑–º–æ–∂–Ω–∞—è CSRF –∞—Ç–∞–∫–∞');
            return res.redirect('/?error=state_mismatch');
        }

        const clientId = process.env.CLIENT_ID;
        const clientSecret = process.env.CLIENT_SECRET;
        const redirectUri = process.env.REDIRECT_URI;

        if (!clientId || !clientSecret || !redirectUri) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            return res.redirect('/?error=server_config');
        }

        // –û–±–º–µ–Ω–∏–≤–∞–µ–º authorization code –Ω–∞ access token
        const tokenResponse = await fetch('https://api.orbitar.space/api/v1/oauth2/token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'User-Agent': 'SpinTar-Game/1.0'
            },
            body: new URLSearchParams({
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: redirectUri,
                client_id: clientId,
                client_secret: clientSecret
            })
        });

        if (!tokenResponse.ok) {
            const errorText = await tokenResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenResponse.status, errorText);
            return res.redirect('/?error=token_exchange_failed');
        }

        const tokenData = await tokenResponse.json();
        console.log('üîç [DEBUG] Token response:', JSON.stringify(tokenData, null, 2));
        
        const { access_token, refresh_token, expires_in } = tokenData;

        if (!access_token) {
            console.error('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω access_token');
            return res.redirect('/?error=no_access_token');
        }

        console.log('üîç [DEBUG] Tokens received:');
        console.log('  - access_token length:', access_token.length);
        console.log('  - refresh_token exists:', !!refresh_token);
        console.log('  - expires_in:', expires_in);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ HttpOnly cookies –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const maxAge = expires_in ? expires_in * 1000 : 3600 * 1000; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ü—Ä–æ–±—É–µ–º –±–µ–∑ Secure –¥–ª—è Vercel
        const responseCookies = [
            `access_token=${access_token}; HttpOnly; SameSite=Lax; Max-Age=${Math.floor(maxAge/1000)}; Path=/`,
            `oauth_state=; HttpOnly; SameSite=Lax; Max-Age=0; Path=/` // —É–¥–∞–ª—è–µ–º state cookie
        ];

        if (refresh_token) {
            responseCookies.push(`refresh_token=${refresh_token}; HttpOnly; SameSite=Lax; Max-Age=2592000; Path=/`); // 30 –¥–Ω–µ–π
        }

        console.log('üîç [DEBUG] Setting cookies:', responseCookies);
        res.setHeader('Set-Cookie', responseCookies);

        console.log('‚úÖ OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

        // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–≥—Ä—É —Å —É—Å–ø–µ—à–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        res.redirect('/?auth=success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback:', error);
        res.redirect('/?error=callback_error');
    }
}
