// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ refresh token
import { getCsrfTokenFromCookie, validateCsrfToken } from '../utils/csrf';

export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF-—Ç–æ–∫–µ–Ω
    const cookieToken = getCsrfTokenFromCookie(req);
    const requestToken = req.headers['x-csrf-token'];
    
    if (!validateCsrfToken(requestToken, cookieToken)) {
        console.error('‚ùå CSRF validation failed in refresh');
        return res.status(403).json({ error: 'CSRF validation failed' });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º refresh_token –∏–∑ cookies
        const cookies = req.headers.cookie?.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = value;
            return acc;
        }, {}) || {};

        const refreshToken = cookies.refresh_token;

        if (!refreshToken) {
            return res.status(401).json({ error: 'No refresh token found' });
        }

        const clientId = process.env.CLIENT_ID;
        const clientSecret = process.env.CLIENT_SECRET;

        if (!clientId || !clientSecret) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            return res.status(500).json({ error: 'Server configuration error' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API –æ—Ä–±–∏—Ç–∞—Ä–∞
        const tokenResponse = await fetch('https://api.orbitar.space/api/v1/oauth2/token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'User-Agent': 'SpinTar-Game/1.0'
            },
            body: new URLSearchParams({
                grant_type: 'refresh_token',
                refresh_token: refreshToken,
                client_id: clientId,
                client_secret: clientSecret
            })
        });

        if (!tokenResponse.ok) {
            const errorText = await tokenResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenResponse.status, errorText);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ Secure
            const isProduction = process.env.NODE_ENV === 'production';
            console.log(`üîí Cookies security: ${isProduction ? 'PRODUCTION with Secure flag' : 'DEVELOPMENT without Secure flag'}`);
            
            // –ï—Å–ª–∏ refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º cookies
            res.setHeader('Set-Cookie', [
                `access_token=; HttpOnly; SameSite=Lax; Max-Age=0; Path=/${isProduction ? '; Secure' : ''}`,
                `refresh_token=; HttpOnly; SameSite=Lax; Max-Age=0; Path=/${isProduction ? '; Secure' : ''}`
            ]);
            
            return res.status(401).json({ error: 'Refresh token invalid' });
        }

        const tokenData = await tokenResponse.json();
        const { access_token, refresh_token: newRefreshToken, expires_in } = tokenData;

        if (!access_token) {
            console.error('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π access_token');
            return res.status(500).json({ error: 'Failed to get new access token' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ Secure
        const isProduction = process.env.NODE_ENV === 'production';
        console.log(`üîí Cookies security: ${isProduction ? 'PRODUCTION with Secure flag' : 'DEVELOPMENT without Secure flag'}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ cookies
        const maxAge = expires_in ? expires_in * 1000 : 3600 * 1000; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        const newCookies = [
            `access_token=${access_token}; HttpOnly; SameSite=Lax; Max-Age=${Math.floor(maxAge/1000)}; Path=/${isProduction ? '; Secure' : ''}`
        ];

        // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π refresh token, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ–≥–æ
        if (newRefreshToken) {
            newCookies.push(`refresh_token=${newRefreshToken}; HttpOnly; SameSite=Lax; Max-Age=2592000; Path=/${isProduction ? '; Secure' : ''}`);
        }

        res.setHeader('Set-Cookie', newCookies);

        console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        
        res.status(200).json({ 
            success: true,
            expires_in: expires_in 
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ error: 'Token refresh failed' });
    }
}
