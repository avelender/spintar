// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –æ—Ä–±–∏—Ç–∞—Ä–∞
export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'GET') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º access_token –∏–∑ cookies
        const cookies = req.headers.cookie?.split(';').reduce((acc, cookie) => {
            const [key, value] = cookie.trim().split('=');
            acc[key] = value;
            return acc;
        }, {}) || {};

        const accessToken = cookies.access_token;
        console.log('üîç [DEBUG] Access token exists:', !!accessToken);
        console.log('üîç [DEBUG] Access token length:', accessToken?.length);
        console.log('üîç [DEBUG] Token first 50 chars:', accessToken?.substring(0, 50));

        if (!accessToken) {
            console.log('‚ùå [DEBUG] No access token found in cookies');
            return res.status(401).json({ error: 'No access token found' });
        }

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username
        let username;
        let decodedPayload;
        try {
            const tokenParts = accessToken.split('.');
            console.log(' [DEBUG] Token parts count:', tokenParts.length);
            
            const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
            username = payload.user?.username || payload.username || payload.sub;
            console.log(' [DEBUG] Extracted username:', username);
        } catch (error) {
            console.log(' [DEBUG] JWT decode error:', error.message);
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const requestBody = username ? { username } : {};
        console.log('üîç [DEBUG] Request body for API:', JSON.stringify(requestBody));

        console.log('üöÄ [DEBUG] Making API request to /api/v1/user/profile');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –æ—Ä–±–∏—Ç–∞—Ä–∞
        const profileResponse = await fetch('https://api.orbitar.space/api/v1/user/profile', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'User-Agent': 'SpinTar-Game/1.0',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì° [DEBUG] API Response status:', profileResponse.status);
        console.log('üì° [DEBUG] API Response headers:', Object.fromEntries(profileResponse.headers.entries()));

        if (!profileResponse.ok) {
            const errorText = await profileResponse.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileResponse.status, errorText);
            
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401), –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ refresh token
            if (profileResponse.status === 401) {
                return res.status(401).json({ error: 'Token expired', needRefresh: true });
            }
            
            return res.status(profileResponse.status).json({ error: 'Failed to get user profile' });
        }

        const profileData = await profileResponse.json();
        console.log('üîç [DEBUG] Full API response:', JSON.stringify(profileData, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
        if (!profileData.payload || !profileData.payload.profile) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payload.profile');
            return res.status(500).json({ error: 'Invalid profile data structure' });
        }

        const userProfile = profileData.payload.profile;
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', userProfile.username);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        res.status(200).json({
            username: userProfile.username,
            displayName: userProfile.display_name || userProfile.username,
            avatar: userProfile.avatar_url || null,
            id: userProfile.id
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
}
